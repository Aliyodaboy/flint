//
//  WalletTest.swift
//  WalletTest
//
//  Created by Franklin Schrans on 12/19/17.
//

import XCTest
@testable import Parser
import AST
import Diagnostic

class WalletTest: XCTestCase, ParserTest {
  
  var tokens: [Token] = TokenizerWalletTest().expectedTokens
  
  var expectedAST: TopLevelModule = TopLevelModule(declarations: [AST.TopLevelDeclaration.contractDeclaration(AST.ContractDeclaration(identifier: AST.Identifier(name: "Wallet", sourceLocation: SourceLocation(line: 1, column: 10, length: 6)), variableDeclarations: [AST.VariableDeclaration(identifier: AST.Identifier(name: "owner", sourceLocation: SourceLocation(line: 2, column: 7, length: 5)), type: AST.Type(name: "Address", sourceLocation: SourceLocation(line: 2, column: 14, length: 7)), sourceLocation: SourceLocation(line: 2, column: 3, length: 3)), AST.VariableDeclaration(identifier: AST.Identifier(name: "contents", sourceLocation: SourceLocation(line: 3, column: 7, length: 8)), type: AST.Type(name: "Ether", sourceLocation: SourceLocation(line: 3, column: 17, length: 5)), sourceLocation: SourceLocation(line: 3, column: 3, length: 3))], sourceLocation: SourceLocation(line: 1, column: 1, length: 8))), AST.TopLevelDeclaration.contractBehaviorDeclaration(AST.ContractBehaviorDeclaration(contractIdentifier: AST.Identifier(name: "Wallet", sourceLocation: SourceLocation(line: 6, column: 1, length: 6)), callerCapabilities: [AST.CallerCapability(name: "any", sourceLocation: SourceLocation(line: 6, column: 11, length: 3))], functionDeclarations: [AST.FunctionDeclaration(modifiers: [AST.Token(kind: AST.Token.Kind.public, sourceLocation: SourceLocation(line: 7, column: 3, length: 6)), AST.Token(kind: AST.Token.Kind.mutating, sourceLocation: SourceLocation(line: 7, column: 10, length: 8))], identifier: AST.Identifier(name: "deposit", sourceLocation: SourceLocation(line: 7, column: 24, length: 7)), parameters: [AST.Parameter(identifier: AST.Identifier(name: "money", sourceLocation: SourceLocation(line: 7, column: 32, length: 5)), type: AST.Type(name: "Ether", sourceLocation: SourceLocation(line: 7, column: 39, length: 5)), sourceLocation: SourceLocation(line: 7, column: 32, length: 5))], resultType: nil, body: [AST.Statement.expression(AST.Expression.binaryExpression(AST.BinaryExpression(lhs: AST.Expression.identifier(AST.Identifier(name: "contents", sourceLocation: SourceLocation(line: 8, column: 5, length: 8))), op: AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.equal), sourceLocation: SourceLocation(line: 8, column: 14, length: 1)), rhs: AST.Expression.binaryExpression(AST.BinaryExpression(lhs: AST.Expression.identifier(AST.Identifier(name: "contents", sourceLocation: SourceLocation(line: 8, column: 16, length: 8))), op: AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.plus), sourceLocation: SourceLocation(line: 8, column: 25, length: 1)), rhs: AST.Expression.identifier(AST.Identifier(name: "money", sourceLocation: SourceLocation(line: 8, column: 27, length: 5))), sourceLocation: SourceLocation(line: 8, column: 16, length: 8))), sourceLocation: SourceLocation(line: 8, column: 5, length: 8))))], sourceLocation: SourceLocation(line: 7, column: 3, length: 6))], sourceLocation: SourceLocation(line: 6, column: 1, length: 6))), AST.TopLevelDeclaration.contractBehaviorDeclaration(AST.ContractBehaviorDeclaration(contractIdentifier: AST.Identifier(name: "Wallet", sourceLocation: SourceLocation(line: 12, column: 1, length: 6)), callerCapabilities: [AST.CallerCapability(name: "owner", sourceLocation: SourceLocation(line: 12, column: 11, length: 5))], functionDeclarations: [AST.FunctionDeclaration(modifiers: [AST.Token(kind: AST.Token.Kind.public, sourceLocation: SourceLocation(line: 13, column: 3, length: 6)), AST.Token(kind: AST.Token.Kind.mutating, sourceLocation: SourceLocation(line: 13, column: 10, length: 8))], identifier: AST.Identifier(name: "withdraw", sourceLocation: SourceLocation(line: 13, column: 24, length: 8)), parameters: [AST.Parameter(identifier: AST.Identifier(name: "money", sourceLocation: SourceLocation(line: 13, column: 33, length: 5)), type: AST.Type(name: "Ether", sourceLocation: SourceLocation(line: 13, column: 40, length: 5)), sourceLocation: SourceLocation(line: 13, column: 33, length: 5))], resultType: nil, body: [AST.Statement.expression(AST.Expression.binaryExpression(AST.BinaryExpression(lhs: AST.Expression.identifier(AST.Identifier(name: "contents", sourceLocation: SourceLocation(line: 14, column: 5, length: 8))), op: AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.equal), sourceLocation: SourceLocation(line: 14, column: 14, length: 1)), rhs: AST.Expression.binaryExpression(AST.BinaryExpression(lhs: AST.Expression.identifier(AST.Identifier(name: "contents", sourceLocation: SourceLocation(line: 14, column: 16, length: 8))), op: AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.minus), sourceLocation: SourceLocation(line: 14, column: 25, length: 1)), rhs: AST.Expression.identifier(AST.Identifier(name: "money", sourceLocation: SourceLocation(line: 14, column: 27, length: 5))), sourceLocation: SourceLocation(line: 14, column: 16, length: 8))), sourceLocation: SourceLocation(line: 14, column: 5, length: 8))))], sourceLocation: SourceLocation(line: 13, column: 3, length: 6)), AST.FunctionDeclaration(modifiers: [AST.Token(kind: AST.Token.Kind.public, sourceLocation: SourceLocation(line: 17, column: 3, length: 6))], identifier: AST.Identifier(name: "getContents", sourceLocation: SourceLocation(line: 17, column: 15, length: 11)), parameters: [], resultType: Optional(AST.Type(name: "Ether", sourceLocation: SourceLocation(line: 17, column: 31, length: 5))), body: [AST.Statement.returnStatement(AST.ReturnStatement(expression: Optional(AST.Expression.identifier(AST.Identifier(name: "contents", sourceLocation: SourceLocation(line: 18, column: 12, length: 8)))), sourceLocation: SourceLocation(line: 18, column: 5, length: 6)))], sourceLocation: SourceLocation(line: 17, column: 3, length: 6))], sourceLocation: SourceLocation(line: 12, column: 1, length: 6)))])
  
  func testWallet() {
    test()
  }
}
