//
//  WalletTest.swift
//  WalletTest
//
//  Created by Franklin Schrans on 12/19/17.
//

import XCTest
@testable import Parser

class WalletTest: XCTestCase, ParserTest {

   var tokens: [Token] = [
      Token.contract, Token.identifier("Wallet"), Token.punctuation(Token.Punctuation.openBrace), Token.var, Token.identifier("owner"), Token.punctuation(Token.Punctuation.colon), Token.identifier("Address"), Token.var, Token.identifier("contents"), Token.punctuation(Token.Punctuation.colon), Token.identifier("Ether"), Token.punctuation(Token.Punctuation.closeBrace), Token.identifier("Wallet"), Token.punctuation(Token.Punctuation.doubleColon), Token.punctuation(Token.Punctuation.openBracket), Token.identifier("any"), Token.punctuation(Token.Punctuation.closeBracket), Token.punctuation(Token.Punctuation.openBrace), Token.public, Token.mutating, Token.func, Token.identifier("deposit"), Token.punctuation(Token.Punctuation.openBracket), Token.identifier("ether"), Token.punctuation(Token.Punctuation.colon), Token.identifier("Ether"), Token.punctuation(Token.Punctuation.closeBracket), Token.punctuation(Token.Punctuation.openBrace), Token.identifier("state"), Token.binaryOperator(Token.BinaryOperator.dot), Token.identifier("contents"), Token.binaryOperator(Token.BinaryOperator.equal), Token.identifier("state"), Token.binaryOperator(Token.BinaryOperator.dot), Token.identifier("contents"), Token.binaryOperator(Token.BinaryOperator.plus), Token.identifier("money"), Token.punctuation(Token.Punctuation.semicolon), Token.punctuation(Token.Punctuation.closeBrace), Token.punctuation(Token.Punctuation.closeBrace), Token.identifier("Wallet"), Token.punctuation(Token.Punctuation.doubleColon), Token.punctuation(Token.Punctuation.openBracket), Token.identifier("owner"), Token.punctuation(Token.Punctuation.closeBracket), Token.punctuation(Token.Punctuation.openBrace), Token.public, Token.mutating, Token.func, Token.identifier("withdraw"), Token.punctuation(Token.Punctuation.openBracket), Token.identifier("ether"), Token.punctuation(Token.Punctuation.colon), Token.identifier("Ether"), Token.punctuation(Token.Punctuation.closeBracket), Token.punctuation(Token.Punctuation.openBrace), Token.identifier("state"), Token.binaryOperator(Token.BinaryOperator.dot), Token.identifier("contents"), Token.binaryOperator(Token.BinaryOperator.equal), Token.identifier("state"), Token.binaryOperator(Token.BinaryOperator.dot), Token.identifier("contents"), Token.binaryOperator(Token.BinaryOperator.minus), Token.identifier("money"), Token.punctuation(Token.Punctuation.semicolon), Token.identifier("state"), Token.binaryOperator(Token.BinaryOperator.dot), Token.identifier("contents"), Token.binaryOperator(Token.BinaryOperator.equal), Token.identifier("state"), Token.binaryOperator(Token.BinaryOperator.dot), Token.identifier("contents"), Token.punctuation(Token.Punctuation.semicolon), Token.punctuation(Token.Punctuation.closeBrace), Token.public, Token.mutating, Token.func, Token.identifier("getContents"), Token.punctuation(Token.Punctuation.openBracket), Token.punctuation(Token.Punctuation.closeBracket), Token.punctuation(Token.Punctuation.arrow), Token.identifier("Ether"), Token.punctuation(Token.Punctuation.openBrace), Token.return, Token.identifier("state"), Token.binaryOperator(Token.BinaryOperator.dot), Token.identifier("contents"), Token.punctuation(Token.Punctuation.semicolon), Token.punctuation(Token.Punctuation.closeBrace), Token.punctuation(Token.Punctuation.closeBrace)
   ]

   var expectedAST: TopLevelModule = TopLevelModule(contractDeclaration: ContractDeclaration(identifier: Identifier(name: "Wallet"), variableDeclarations: [VariableDeclaration(identifier: Identifier(name: "owner"), type: Type(name: "Address")), VariableDeclaration(identifier: Identifier(name: "contents"), type: Type(name: "Ether"))]), contractBehaviorDeclarations: [ContractBehaviorDeclaration(contractIdentifier: Identifier(name: "Wallet"), callerCapabilities: [CallerCapability(name: "any")], functionDeclarations: [FunctionDeclaration(modifiers: [Token.public, Token.mutating], identifier: Identifier(name: "deposit"), parameters: [Parameter(identifier: Identifier(name: "ether"), type: Type(name: "Ether"))], resultType: nil, body: [Statement.expression(Expression.binaryExpression(BinaryExpression(lhs: Expression.binaryExpression(BinaryExpression(lhs: Expression.identifier(Identifier(name: "state")), op: Token.BinaryOperator.dot, rhs: Expression.identifier(Identifier(name: "contents")))), op: Token.BinaryOperator.equal, rhs: Expression.binaryExpression(BinaryExpression(lhs: Expression.binaryExpression(BinaryExpression(lhs: Expression.identifier(Identifier(name: "state")), op: Token.BinaryOperator.dot, rhs: Expression.identifier(Identifier(name: "contents")))), op: Token.BinaryOperator.plus, rhs: Expression.identifier(Identifier(name: "money")))))))])]), ContractBehaviorDeclaration(contractIdentifier: Identifier(name: "Wallet"), callerCapabilities: [CallerCapability(name: "owner")], functionDeclarations: [FunctionDeclaration(modifiers: [Token.public, Token.mutating], identifier: Identifier(name: "withdraw"), parameters: [Parameter(identifier: Identifier(name: "ether"), type: Type(name: "Ether"))], resultType: nil, body: [Statement.expression(Expression.binaryExpression(BinaryExpression(lhs: Expression.binaryExpression(BinaryExpression(lhs: Expression.identifier(Identifier(name: "state")), op: Token.BinaryOperator.dot, rhs: Expression.identifier(Identifier(name: "contents")))), op: Token.BinaryOperator.equal, rhs: Expression.binaryExpression(BinaryExpression(lhs: Expression.binaryExpression(BinaryExpression(lhs: Expression.identifier(Identifier(name: "state")), op: Token.BinaryOperator.dot, rhs: Expression.identifier(Identifier(name: "contents")))), op: Token.BinaryOperator.minus, rhs: Expression.identifier(Identifier(name: "money"))))))), Statement.expression(Expression.binaryExpression(BinaryExpression(lhs: Expression.binaryExpression(BinaryExpression(lhs: Expression.identifier(Identifier(name: "state")), op: Token.BinaryOperator.dot, rhs: Expression.identifier(Identifier(name: "contents")))), op: Token.BinaryOperator.equal, rhs: Expression.binaryExpression(BinaryExpression(lhs: Expression.identifier(Identifier(name: "state")), op: Token.BinaryOperator.dot, rhs: Expression.identifier(Identifier(name: "contents")))))))]), FunctionDeclaration(modifiers: [Token.public, Token.mutating], identifier: Identifier(name: "getContents"), parameters: [], resultType: Optional(Type(name: "Ether")), body: [Statement.returnStatement(ReturnStatement(expression: Expression.binaryExpression(BinaryExpression(lhs: Expression.identifier(Identifier(name: "state")), op: Token.BinaryOperator.dot, rhs: Expression.identifier(Identifier(name: "contents"))))))])])])

   func testWallet() {
      test()
   }
}
