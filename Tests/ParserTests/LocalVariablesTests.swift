//
//  LiteralTests.swift
//  ParserTests
//
//  Created by Franklin Schrans on 12/24/17.
//

import XCTest
@testable import Parser
import AST
import Diagnostic

class LiteralTest: XCTestCase, ParserTest {
  var tokens: [Token] = [AST.Token(kind: AST.Token.Kind.identifier("Test"), sourceLocation: SourceLocation(line: 1, column: 1, length: 4)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.doubleColon), sourceLocation: SourceLocation(line: 1, column: 6, length: 1)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.openBracket), sourceLocation: SourceLocation(line: 1, column: 8, length: 1)), AST.Token(kind: AST.Token.Kind.identifier("any"), sourceLocation: SourceLocation(line: 1, column: 9, length: 3)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.closeBracket), sourceLocation: SourceLocation(line: 1, column: 12, length: 1)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.openBrace), sourceLocation: SourceLocation(line: 1, column: 14, length: 1)), AST.Token(kind: AST.Token.Kind.newline, sourceLocation: SourceLocation(line: 1, column: 15, length: 1)), AST.Token(kind: AST.Token.Kind.func, sourceLocation: SourceLocation(line: 2, column: 3, length: 4)), AST.Token(kind: AST.Token.Kind.identifier("foo"), sourceLocation: SourceLocation(line: 2, column: 8, length: 3)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.openBracket), sourceLocation: SourceLocation(line: 2, column: 11, length: 1)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.closeBracket), sourceLocation: SourceLocation(line: 2, column: 12, length: 1)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.arrow), sourceLocation: SourceLocation(line: 2, column: 14, length: 1)), AST.Token(kind: AST.Token.Kind.identifier("Bool"), sourceLocation: SourceLocation(line: 2, column: 16, length: 4)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.openBrace), sourceLocation: SourceLocation(line: 2, column: 21, length: 1)), AST.Token(kind: AST.Token.Kind.newline, sourceLocation: SourceLocation(line: 2, column: 22, length: 1)), AST.Token(kind: AST.Token.Kind.var, sourceLocation: SourceLocation(line: 3, column: 5, length: 3)), AST.Token(kind: AST.Token.Kind.identifier("a"), sourceLocation: SourceLocation(line: 3, column: 9, length: 1)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.colon), sourceLocation: SourceLocation(line: 3, column: 10, length: 1)), AST.Token(kind: AST.Token.Kind.identifier("Int"), sourceLocation: SourceLocation(line: 3, column: 12, length: 3)), AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.equal), sourceLocation: SourceLocation(line: 3, column: 16, length: 1)), AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.decimal(AST.Token.Kind.DecimalLiteral.integer(2))), sourceLocation: SourceLocation(line: 3, column: 18, length: 1)), AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.plus), sourceLocation: SourceLocation(line: 3, column: 20, length: 1)), AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.decimal(AST.Token.Kind.DecimalLiteral.real(4, 564))), sourceLocation: SourceLocation(line: 3, column: 24, length: 3)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.semicolon), sourceLocation: SourceLocation(line: 3, column: 27, length: 1)), AST.Token(kind: AST.Token.Kind.newline, sourceLocation: SourceLocation(line: 3, column: 28, length: 1)), AST.Token(kind: AST.Token.Kind.var, sourceLocation: SourceLocation(line: 4, column: 5, length: 3)), AST.Token(kind: AST.Token.Kind.identifier("b"), sourceLocation: SourceLocation(line: 4, column: 9, length: 1)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.colon), sourceLocation: SourceLocation(line: 4, column: 10, length: 1)), AST.Token(kind: AST.Token.Kind.identifier("String"), sourceLocation: SourceLocation(line: 4, column: 12, length: 6)), AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.equal), sourceLocation: SourceLocation(line: 4, column: 19, length: 1)), AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.string("hello")), sourceLocation: SourceLocation(line: 4, column: 21, length: 7)), AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.plus), sourceLocation: SourceLocation(line: 4, column: 29, length: 1)), AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.string(" world")), sourceLocation: SourceLocation(line: 4, column: 31, length: 8)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.semicolon), sourceLocation: SourceLocation(line: 4, column: 39, length: 1)), AST.Token(kind: AST.Token.Kind.newline, sourceLocation: SourceLocation(line: 4, column: 40, length: 1)), AST.Token(kind: AST.Token.Kind.return, sourceLocation: SourceLocation(line: 5, column: 5, length: 6)), AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.boolean(AST.Token.Kind.BooleanLiteral.false)), sourceLocation: SourceLocation(line: 5, column: 12, length: 5)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.semicolon), sourceLocation: SourceLocation(line: 5, column: 17, length: 1)), AST.Token(kind: AST.Token.Kind.newline, sourceLocation: SourceLocation(line: 5, column: 18, length: 1)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.closeBrace), sourceLocation: SourceLocation(line: 6, column: 3, length: 1)), AST.Token(kind: AST.Token.Kind.newline, sourceLocation: SourceLocation(line: 6, column: 4, length: 1)), AST.Token(kind: AST.Token.Kind.punctuation(AST.Token.Kind.Punctuation.closeBrace), sourceLocation: SourceLocation(line: 7, column: 1, length: 1)), AST.Token(kind: AST.Token.Kind.newline, sourceLocation: SourceLocation(line: 7, column: 2, length: 1))]

  var expectedAST: TopLevelModule =
    TopLevelModule(declarations: [AST.TopLevelDeclaration.contractBehaviorDeclaration(AST.ContractBehaviorDeclaration(contractIdentifier: AST.Identifier(name: "Test", sourceLocation: SourceLocation(line: 1, column: 1, length: 4)), callerCapabilities: [AST.CallerCapability(name: "any", sourceLocation: SourceLocation(line: 1, column: 9, length: 3))], functionDeclarations: [AST.FunctionDeclaration(modifiers: [], identifier: AST.Identifier(name: "foo", sourceLocation: SourceLocation(line: 2, column: 8, length: 3)), parameters: [], resultType: Optional(AST.Type(name: "Bool", sourceLocation: SourceLocation(line: 2, column: 16, length: 4))), body: [AST.Statement.expression(AST.Expression.binaryExpression(AST.BinaryExpression(lhs: AST.Expression.variableDeclaration(AST.VariableDeclaration(identifier: AST.Identifier(name: "a", sourceLocation: SourceLocation(line: 3, column: 9, length: 1)), type: AST.Type(name: "Int", sourceLocation: SourceLocation(line: 3, column: 12, length: 3)), sourceLocation: SourceLocation(line: 3, column: 5, length: 3))), op: AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.equal), sourceLocation: SourceLocation(line: 3, column: 16, length: 1)), rhs: AST.Expression.binaryExpression(AST.BinaryExpression(lhs: AST.Expression.literal(AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.decimal(AST.Token.Kind.DecimalLiteral.integer(2))), sourceLocation: SourceLocation(line: 3, column: 18, length: 1))), op: AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.plus), sourceLocation: SourceLocation(line: 3, column: 20, length: 1)), rhs: AST.Expression.literal(AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.decimal(AST.Token.Kind.DecimalLiteral.real(4, 564))), sourceLocation: SourceLocation(line: 3, column: 24, length: 3))), sourceLocation: SourceLocation(line: 3, column: 18, length: 1))), sourceLocation: SourceLocation(line: 3, column: 5, length: 3)))), AST.Statement.expression(AST.Expression.binaryExpression(AST.BinaryExpression(lhs: AST.Expression.variableDeclaration(AST.VariableDeclaration(identifier: AST.Identifier(name: "b", sourceLocation: SourceLocation(line: 4, column: 9, length: 1)), type: AST.Type(name: "String", sourceLocation: SourceLocation(line: 4, column: 12, length: 6)), sourceLocation: SourceLocation(line: 4, column: 5, length: 3))), op: AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.equal), sourceLocation: SourceLocation(line: 4, column: 19, length: 1)), rhs: AST.Expression.binaryExpression(AST.BinaryExpression(lhs: AST.Expression.literal(AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.string("hello")), sourceLocation: SourceLocation(line: 4, column: 21, length: 7))), op: AST.Token(kind: AST.Token.Kind.binaryOperator(AST.Token.Kind.BinaryOperator.plus), sourceLocation: SourceLocation(line: 4, column: 29, length: 1)), rhs: AST.Expression.literal(AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.string(" world")), sourceLocation: SourceLocation(line: 4, column: 31, length: 8))), sourceLocation: SourceLocation(line: 4, column: 21, length: 7))), sourceLocation: SourceLocation(line: 4, column: 5, length: 3)))), AST.Statement.returnStatement(AST.ReturnStatement(expression: Optional(AST.Expression.literal(AST.Token(kind: AST.Token.Kind.literal(AST.Token.Kind.Literal.boolean(AST.Token.Kind.BooleanLiteral.false)), sourceLocation: SourceLocation(line: 5, column: 12, length: 5)))), sourceLocation: SourceLocation(line: 5, column: 5, length: 6)))], sourceLocation: SourceLocation(line: 2, column: 3, length: 4))], sourceLocation: SourceLocation(line: 1, column: 1, length: 4)))])

  func testLocalVariables() {
    test()
  }
}

