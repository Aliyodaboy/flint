import Transaction.Account;
import Transaction.Coin;

main () {
  _ = get_txn_sender();
  return;
}

//! provide module
module Coin {
  import 0x0.LibraCoin;

  resource T {
    coin: LibraCoin.T
  }

  public new(zero: address): Self.T {
    if (move(zero) != 0x0) {
      assert(false, 9001);
    }
    return T {
      coin: LibraCoin.zero()
    };
  }

  public getValue(this: &mut Self.T): u64 {
    let coin: &LibraCoin.T;
    coin = &move(this).coin;
    return LibraCoin.value(move(coin));
  }

  public withdraw(this: &mut Self.T, amount: u64): Self.T {
    let coin: &mut LibraCoin.T;
    coin = &mut move(this).coin;
    return T {
      coin: LibraCoin.withdraw(move(coin), move(amount))
    };
  }

  public transfer(this: &mut Self.T, other: &mut Self.T, amount: u64) {
    let coin: &mut LibraCoin.T;
    let other_coin: &mut LibraCoin.T;
    let temporary: LibraCoin.T;
    coin = &mut move(this).coin;
    temporary = LibraCoin.withdraw(move(coin), move(amount));
    other_coin = &mut move(other).coin;
    LibraCoin.deposit(move(other_coin), move(temporary));
    return;
  }
}
