//VERIFY-CHECK
contract Test {
  var s: S
}

struct J {
  var s: S
  var ss: [Int: S]

  public init(s: inout S)
  {
    self.s = s
    self.ss = [:]
    // Contract fails to verify because of this line
    //  - nextInstance postCond failure
    //let j: J = J(&s)
  }

  public init()
    mutates (S.i, S.is, S.ks, S.j)
  {
    self.s = S()
    self.ss = [:]
  }
}

struct S {
  var i: Int
  var is: [Int]
  var ks: [[[Int]]]
  var j: Int = 0

  invariant (i > 0)


  public init()
    pre (1==1)
  {
    self.is = []
    self.ks = []
    i = 1
  }

  public func wow()
    mutates (is, j)
    pre(2 == 2)
    pre (j < 10)
    post (j < 10)
  {
    is[0] = 0
    j = 1
  }
}

Test :: (any) {
  public init()
    mutates (S.i, S.is, S.j, S.ks)
    pre(1==1)
  {
    s = S()
  }

  @payable
  public func t(implicit w: Wei)
    mutates (s, S.i, S.is, S.j, S.ks, J.s, J.ss, Wei.rawValue)
  {
    let v: Int = w.getRawValue()
    let i: Int = s.i

    //Would violate S's invariant - call J() picks up the error, as it requires it as a pre-condition
    //s.i = 0

    let j: J = J(&s)
    let k: Int = j.ss[i+=1].is[1]

    let size0: Int = j.ss.size
    let size1: Int = s.ks[0][1].size
  }

  //VERIFY-FAIL
  public violateSInvariant()
    mutates (S.i)
  {
    s.i = 0
  }
}
