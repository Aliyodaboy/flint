//VERIFY-CHECK
contract Array {
  var as: [Int]
  var bs: [Int: Int]

  var cs: [[Int]]
  var ds: [[[Int]]]// = []
  var es: [Int: [[Int]]]// = [:]
}

Array :: (any) {
  public init() {
    as = []
    bs = [:]
    cs = []
    ds = []
    es = [:]
  }

  func arrayLiteral()
    mutates (as, bs, cs)
  {
    as[0] = 0
    bs[10] = 5
    cs[0] = []
    cs[0][0] = 0

    //let b: [[Int]] = []
  }

  func arrayDictSize() {
    let asSize: Int = as.size
    let bsSize: Int = bs.size
  }

  func dictKeys() {
    let bsKeys: [Int] = bs.keys

    let esKeys: [Int] = es.keys
    let esSubSize: Int = es[esKeys[0]].size
  }

  func growSize(a: Address) {
    var bs: [Int] = [1,2,3,4]
    let bs_size_before: Int = bs.size
    bs[4] = 5
    assert(bs_size_before + 1 == bs.size)

    var as: [Address: Int] = [:]
    let as_size_before: Int = as.size
    as[a] = 5
    assert(as_size_before + 1 == as.size)
  }

  //func callFuncIterable() {
  //  iterableParam(self.as, self.bs)
  //}

  //func iterableParam(as: [Int], bs: [Int: Int]) {
  //  let aSize: Int = as.size
  //  let bSize: Int = bs.size
  //}
}
