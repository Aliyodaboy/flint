contract Array {
  var arr: Int[4] = []
  var arr2: Int[10] = []
  var numWrites: Int = 0

  var arr3: [S] = []

  var nested: [[Int]] = [[]]
  var nested2: [Int[4]] = [[]]
  var nested3: [[[Address]]] = [[[]]]
  var nestedDict: [Address: [Int]] = [:]
}

Array :: (any) {
  public init() {}

  func increaseNumWrites()
      mutates (numWrites) {
    self.numWrites += 1
  }

  public func write(index: Int, val: Int)
      mutates (arr, numWrites) {
    arr[index] = val
    increaseNumWrites()
  }

  public func value(index: Int) -> Int {
    return arr[index]
  }

  public func value2(index: Int) -> Int {
    return arr2[index]
  }

  public func sizeUp() -> Int {
    let i: Int = arr.size
    return i
  }

  public func sizeUp2() -> Int {
    return arr2.size
  }

  public func sizeUp3() -> Int {
    return arr3.size
  }

  public func write2(index: Int, val: Int)
      mutates (arr2, numWrites)  {
    arr2[index] = val
    increaseNumWrites()
  }

  public func valueBoth(index: Int) -> Int {
    return arr[index] + arr2[index]
  }

  public func numWrites() -> Int {
    return numWrites
  }

  public func write3(index: Int, a: Int, b: Bool, cA: Int)
      mutates (arr3) {
    arr3[index].a = a
    arr3[index].b = b
    arr3[index].c.a = cA
  }

  public func value3a(index: Int) -> Int {
    return arr3[index].a
  }

  public func value3b(index: Int) -> Bool {
    return arr3[index].b
  }

  public func value3cA(index: Int) -> Int {
    return arr3[index].c.a
  }

  public func nestedSet(i: Int, j: Int, v: Int) 
      mutates(nested) {
    nested[i][j] = v
  }

  public func nestedSet2(i: Int, j: Int, v: Int) 
      mutates(nested2) {
    nested2[i][j] = v
  }

  public func nestedSet3(i: Int, j: Int, k: Int, v: Address) 
      mutates(nested3) {
    nested3[i][j][k] = v
  }

  public func nestedSetDict(caller: Address, i: Int, v: Int) 
      mutates(nestedDict) {
    nestedDict[caller][i] = v
  }

  public func nestedValue(i: Int, j: Int) -> Int {
    return nested[i][j]
  }
  public func nestedValue2(i: Int, j: Int) -> Int {
    return nested2[i][j]
  }
  public func nestedValue3(i: Int, j: Int, k: Int) -> Address {
    return nested3[i][j][k]
  }
  public func nestedValueDict(i: Address, j: Int) -> Int {
    return nestedDict[i][j]
  }

  public func shadowing(i: Int) -> Int {
    var i: Int = i
    i += 20
    return i
  }

}

struct S {
  var a: Int = 0
  var b: Bool = false
  var c: T = T()
}

struct T {
  var a: Int = 0
}
