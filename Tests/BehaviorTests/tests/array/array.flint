contract Array {
  var arr: Int[4]
  var arr2: Int[10]
  var numWrites: Int

  var arr3: [S]
}

Array :: (any) {
  mutating func increaseNumWrites() {
    self.numWrites += 1 
  }

  public mutating func write(index: Int, val: Int) {
    arr[index] = val
    increaseNumWrites()
  }

  public func value(index: Int) -> Int {
    return arr[index]
  }

  public func value2(index: Int) -> Int {
    return arr2[index]
  }

  public mutating func write2(index: Int, val: Int) {
    arr2[index] = val
    increaseNumWrites()
  }

  public func valueBoth(index: Int) -> Int {
    return arr[index] + arr2[index]
  }

  public func numWrites() -> Int {
    return numWrites
  }

  public mutating func write3(index: Int, a: Int, b: Bool, cA: Int) {
    arr3[index].a = a
    arr3[index].b = b
    arr3[index].c.a = cA
  }

  public func value3a(index: Int) -> Int {
    return arr3[index].a
  }

  public func value3b(index: Int) -> Bool {
    return arr3[index].b
  }

  public func value3cA(index: Int) -> Int {
    return arr3[index].c.a
  }
}

struct S {
  var a: Int
  var b: Bool
  var c: T
}

struct T {
  var a: Int
}
