// RUN: %flintc %s --verify

struct Test {
  var a: Int = 0

  init() {}

  func foo() -> Int {
    return 2
  }
}

struct Test2 {
  var a: Test = Test()

  init() {}
}

contract Foo {
  var c: Int = 0
  var a: Test
  var b: Test2
}

Foo :: (any) {
  public init() {
    a = Test()
    b = Test2()
  }

  public func bar() -> Int {
    return a.a + a.foo() + b.a.a
  }

  public mutating func baz() {
    a.a = 2
  }

  func f() {
    b.a.a = 2 // expected-error {{Use of mutating statement in a nonmutating function}}
  }

  mutating func a() {
    b(&a)
    b(&b) // expected-error {{Function b is not in scope or cannot be called using the caller capabilities (any)}}
  }

  mutating func b(b: inout Test) {
    b(&b)
    b(&self.b) // expected-error {{Function b is not in scope or cannot be called using the caller capabilities (any)}}
  }
}
