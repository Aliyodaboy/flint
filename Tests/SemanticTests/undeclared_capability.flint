// RUN: %flintc %s --verify

contract Test {}

Test :: caller <- (any) {
  public init() {}

  public func isOwner(addr: Address, x: Int) -> Bool {
    return true
  }

  public func isOwner2(addr: Address, x: Int) -> Int {
    return 1
  }


  public func getPrimaryOwner(addr: Address) -> Address {
    return addr
  }
}

Test :: (alice) {} // expected-error {{Caller capability 'alice' is undefined in 'Test' or has incompatible type}}

Test :: (isOwner) {} // expected-error {{Caller capability 'isOwner' is undefined in 'Test' or has incompatible type}}

Test :: (isOwner2) {} // expected-error {{Caller capability 'isOwner2' is undefined in 'Test' or has incompatible type}}

Test :: (getPrimaryOwner) {} // expected-error {{Caller capability 'getPrimaryOwner' is undefined in 'Test' or has incompatible type}}
