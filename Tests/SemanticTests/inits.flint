// RUN: %flintc %s --verify

contract Test {
  let a: Address
  var b: [Address] = []
  var c: [Address: Int] = [] // expected-error {{Incompatible assignment between values of type [Address: Int] and [Any]}}
  var d: [Int] = [:] // expected-error {{Incompatible assignment between values of type [Int] and [Any: Any]}}
  var e: Bool
  var f: Int
  let g: Bool
}

Test :: caller <- (any) {
  public init(a: Address, f: Int) { // expected-note {{A public initializer is already declared here}}
    self.a = a
    self.f = f
  } // expected-error {{Return from initializer without initializing all properties}}
  // expected-note@8 {{e is uninitialized}}

  public init() { // expected-error {{A public initializer has already been defined}}
    self.a = caller
    e = false
    f = 0
    g = false
  }

  init() {
    self.a = caller
    e = false
    f = 0
    g = false
  }

  func foo() {}
}

Test :: (a) {
  public init(a: Address) { // expected-error {{Public contract initializer should be callable using caller capability "any"}}
    self.a = a
    e = false
    f = 0
    g = false
  }
}

struct A {
  var a: Int = 0
  var b: Bool // expected-error {{State property 'b' needs to be assigned a value}}
  var c: C
}

struct C {
  var a: Int
  let b: Bool = false

  init() {} // expected-error {{Return from initializer without initializing all properties}}
  // expected-note@53 {{a is uninitialized}}
}
