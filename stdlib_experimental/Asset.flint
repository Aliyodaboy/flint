// Any currency should implement this trait to be able to use the currency
// fully. The default implementations should be left intact, only
// `getRawValue` and `setRawValue` need to be implemented.

struct trait Asset {

  // Initialises the asset "unsafely", i.e. from `amount` given as an integer.
  init(unsafeRawValue: Int)

  // Initialises the asset by transferring `amount` from an existing asset.
  // Should check if `source` has sufficient funds, and cause a fatal error
  // if not.
  init(source: inout Self, amount: Int)

  // Initialises the asset by transferring all funds from `source`.
  // `source` should be left empty.
  init(source: inout Self)

  // Moves `amount` from `source` into `this` asset.
  func transfer(source: inout Self, amount: Int)

  func transfer(source: inout Self) {
    transfer(source: &source, amount: source.getRawValue())
  }

  // Returns the funds contained in this asset, as an integer.
  func getRawValue() -> Int
}



// Concept stage
//external trait LibraCoin {
//  zero() -> LibraCoin.T
//  value(coin_ref: &LibraCoin.T) -> u64
//  deposit(coin_ref: &mut LibraCoin.T, check: LibraCoin.T)
//  withdraw(coin_ref: &mut LibraCoin.T, amount: u64): LibraCoin.T
//}
external trait LibraCoin {
  func zero() -> LibraCoin
}

struct Libra: Asset {
  let coin: LibraCoin

  init(unsafeRawValue: Int) {
    if unsafeRawValue != 0 {
      fatalError()
    }
    self.coin = call! LibraCoin.zero()
  }

  init(source: inout Libra, amount: Int) {
    transfer(source: &source, amount: amount)
  }

  init(source: inout Libra) {
    transfer(source: &source)
  }

  func transfer(source: inout Libra, amount: Int) {
    if source.getRawValue() < amount {
       fatalError()
    }
    flint$transfer(&coin, &source)
  }  

  func getRawValue() -> Int {
    return (call! LibraCoin.value(&coin)) as! Int
  }

  func setRawValue() -> Int {
    return getRawValue()
  }
}

struct Wei: Asset {
  var rawValue: Int = 0

  init(unsafeRawValue: Int) {
    if unsafeRawValue != 0 {
      fatalError()
    }
    self.rawValue = unsafeRawValue
  }

  // Should be invisible to the user and implemented internally
  init(youAreTheCompiler: Bool, unsafeRawValue: Int) {
    if youAreTheCompiler == false {
      fatalError()
    }
    self.rawValue = unsafeRawValue
  }

  init(source: inout Wei, amount: Int) {
    transfer(source: &source, amount: amount)
  }

  init(source: inout Wei) {
    transfer(source: &source)
  }

  func transfer(source: inout Wei, amount: Int) {
    if source.getRawValue() < amount {
       fatalError()
    }

    // TODO: support let _: Int = ...
    let unused1: Int = source.setRawValue(value: source.getRawValue() - amount)
    let unused2: Int = setRawValue(value: getRawValue() + amount)
  }  

  func setRawValue(value: Int) -> Int
    mutates (rawValue)

    post(self.rawValue == value)
    post(returns value)
  {
    rawValue = value
    return rawValue
  }

  func getRawValue() -> Int
    post(returns rawValue)
  {
    return rawValue
  }
}
