modules:
module Factorial {
    resource T {
        value: u64,
    }

    public publish() {
        move_to_sender<T>(
            T {
                value: 0,
            }
        );
        return;
    }

    factorial(n: u64): u64 {
        if (copy(n) < 2) {
            return 1;
        }
        return copy(n) * Self.factorial(move(n) - 1);
    }

    public calculate(contract_addr: address, n: u64) {
        let contract_ref: &mut R#Self.T;

        contract_ref = borrow_global<T>(move(contract_addr)); 
        *(&mut move(contract_ref).value) = Self.factorial(move(n));
        return;
    }

    public getValue(contract_addr: address): u64 {
        let contract_ref: &mut R#Self.T;
        
        contract_ref = borrow_global<T>(move(contract_addr)); 
        return *&move(contract_ref).value;
    }
}

script:
import Transaction.Factorial;

main() {
    let my_addr: address;
    
    my_addr = get_txn_sender();
    Factorial.publish();
    Factorial.calculate(copy(my_addr), 5);
    assert(Factorial.getValue(copy(my_addr)) == 120, 1);
    Factorial.calculate(copy(my_addr), 1);
    assert(Factorial.getValue(move(my_addr)) == 1, 1);
    return;
}