// Contract declarations contain only their state properties.
contract Bank {
  var manager: Address
  var balances: [Address: Wei] = [:]
  var accounts: [Address] = []
  var lastIndex: Int = 0

  invariant (lastIndex == accounts.size)

  var totalDonations: Wei = Wei(0)

  event didCompleteTransfer (from: Address, to: Address, value: Int)
}

// The functions in this block can be called by any user.
Bank :: account <- (any) {
  public init(manager: Address)
  // Specify Wei.rawValue, as this state is not defined in current contract
    mutates(Wei.rawValue)
  {
    self.manager = manager
  }

  // Returns the manager's address.
  public func register()
    mutates (accounts, lastIndex)
  {
    accounts[lastIndex] = account
    lastIndex += 1
  }

  public func getManager() -> Address {
    return manager
  }

  @payable
  public func donate(implicit value: Wei)
    mutates (totalDonations, Wei.rawValue)
  {
    // This will transfer the funds into totalDonations.
    totalDonations.transfer(source: &value)
  }
}

// Only the manager can call these functions.
Bank :: (manager) {

  // This function needs to be declared "mutating" as its body mutates
  // the contract's state.
  public func freeDeposit(account: Address, amount: Int)
    mutates (balances, Wei.rawValue)
  {
    var i: Int = (0-1)
    var w: Wei = Wei(amount)
    balances[account].transfer(source: &w)
  }

  public func clear(account: Address)
    mutates (balances, Wei.rawValue)
  {
    balances[account] = Wei(0)
  }

  // This function is non-mutating.
  public func getDonations() -> Int {
    return totalDonations.getRawValue()
  }
}

// Any user in accounts can call these functions.
// The matching user's address is bound to the variable account.
Bank :: account <- (accounts) {
  public func getBalance() -> Int {
    return balances[account].getRawValue()
  }

  public func transfer(amount: Int, destination: Address)
    mutates (balances, Wei.rawValue)

    pre (amount > 0)
  {
    // Transfer Wei from one account to another. The balances of the
    // originator and the destination are updated atomically.
    // Crashes if balances[account] doesn't have enough Wei.
    balances[destination].transfer(source: &balances[account], amount: amount)

    // Emit the Ethereum event.
    emit didCompleteTransfer(from: account, to: destination, value: amount)
  }

  @payable
  public func deposit(implicit value: Wei)
    mutates(balances, Wei.rawValue)
  {
    balances[account].transfer(source: &value)
  }

  public func withdraw(amount: Int)
    mutates(balances, Wei.rawValue)

    pre (amount > 0)
  {
    // Transfer some Wei from balances[account] into a local variable.
    let w: Wei = Wei(&balances[account], amount)

    // Send the amount back to the Ethereum user.
    send(account, &w)
    assert(w.getRawValue() == 0)
  }
}
