struct Proposal {
  var proposer: Address = 0x0000000000000000000000000000000000000000
  var value: Int = 0
  var recipient: Address = 0x0000000000000000000000000000000000000000
  var yesVotes: Int = 0
  var noVotes: Int = 0
  var quorum: Int = 0
  var finished: Bool = false
  var success: Bool = false
  var voted: [Address: Bool]

  invariant (value >= 0)
  invariant (yesVotes >= 0)
  invariant (noVotes >= 0)
  invariant (quorum >= 0)
  invariant (yesVotes + noVotes == voted.size)
  //invariant (finished ==> (success == ((yesVotes + noVotes) >= quorum && yesVotes > noVotes)))

  public init() {
    self.voted = [:]
  }
}

contract SimpleDAO (Join, Propose, Vote) {
  var avaliableMemberSlots: Int = 3
  var proposal: Proposal
  var members: [Address]
  var balances: [Address: Int]
  var totalSupply: Int = 0

  invariant (totalSupply >= 0)
}

SimpleDAO @(any) :: (any) {
  public init()
    mutates (Proposal.proposer, Proposal.value, Proposal.recipient, Proposal.yesVotes, Proposal.noVotes, Proposal.quorum, Proposal.finished, Proposal.success, Proposal.voted)
  {
    proposal = Proposal()
    self.members = []
    self.balances = [:]
    become Join
  }
}

SimpleDAO @(Propose) :: caller <- (members) {
  public func newProposal(recipient: Address, value: Int)
    mutates (proposal, Proposal.proposer, Proposal.value, Proposal.recipient, Proposal.yesVotes, Proposal.noVotes, Proposal.quorum, Proposal.finished, Proposal.success, Proposal.voted)
  {
    // Satisfy invariant
    if (value < 0) {
      fatalError()
    }

    proposal = Proposal()
    proposal.proposer = caller
    proposal.value = value
    proposal.recipient = recipient
    proposal.quorum = totalSupply / 2
    become Vote
  }

  // This isn't a good function because they don't stop being a member when they leave, but it's sufficient for testing
  public func leave()
    mutates (balances, totalSupply)
  {
    let balance: Int = balances[caller]

    balances[caller] = 0
    totalSupply -= balance
    // Transfer money
  }
}

SimpleDAO @(Vote) :: caller <- (members) {
  public func vote(approve: Bool)
    mutates (proposal, Proposal.voted, Proposal.yesVotes, Proposal.noVotes)
  {
    if proposal.voted[caller] {
      fatalError()
    }

    if approve {
      proposal.yesVotes += balances[caller]
    } else {
      proposal.noVotes += balances[caller]
    }

    proposal.voted[caller] = true
  }

  public func executeProposal()
    mutates (proposal, Proposal.success, Proposal.finished)
  {
    if(caller != proposal.proposer || proposal.finished) {
      fatalError()
    }

    proposal.finished = true
    if (proposal.yesVotes + proposal.noVotes) >= proposal.quorum && proposal.yesVotes > proposal.noVotes {
       proposal.success = true // Should also transfer money
    }

    become Propose
  }
}

SimpleDAO @(Join) :: caller <- (any) {

  public func join(value: Int)
    mutates (balances, members, totalSupply, avaliableMemberSlots)
  {
    balances[caller] = value
    totalSupply += value
    members[3 - avaliableMemberSlots] = caller

    avaliableMemberSlots -= 1
    if avaliableMemberSlots < 1 {
      become Propose
    }
  }

  public func isJoin() -> Bool {
    return true
  }
}

SimpleDAO @(any) :: (any) {
  public func isMember(candidate: Address) -> Bool {
    var found: Bool = false
    for let member: Address in members {
      if member == candidate {
        found = true
      }
    }
    return found
  }

  public func slotsLeft() -> Int {
    return avaliableMemberSlots
  }
}

