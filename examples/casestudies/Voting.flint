contract Ballot (Proposing, Voting) {
  // The administrator of the ballot.
  visible let chairperson: Address

  // The accounts which have voted in this ballot.
  var voters: [Address: Voter] = [:]
  visible var votersKeys: [Address] = [] // this can be removed once keys property of dictionary is added to stdlib

  // The list of proposals.
  var proposals: [Proposal] = []

  invariant (forall (a, Address, arrayContains(votersKeys, a) ==> voters[a].weight > 0 && (voters[a].voted ==> voters[a].vote != (0-1))))
  invariant (forall (a, Address, arrayContains(votersKeys, a) ==> voters[a].weight > 0 && (voters[a].vote != (0-1) ==> voters[a].voted)))
  invariant (forall (a, Address, arrayContains(votersKeys, a) ==> dictContains(voters, a)))

  //holistic
  // invariant (forall (b: Ballot) :: ())

}

struct Voter {
  // The weight of this voter's vote. Increases when other voters delegate
  // their vote to this voter.
  var votingWeight: Int

  // Whether the voter has voted for a proposal.
  var hasVoted: Bool = false

  // The voter this voter has delegated its vote to.
  var delegate: Address = 0x0000000000000000000000000000000000000000

  // The ID of the proposal this voter has voted for.
  var votedProposalID: Int = (0-1)

  public init(weight: Int) {
    votingWeight = weight
  }
}

struct Proposal {
  // The name of the proposal.
  var name: String

  // The number of votes for this proposal.
  var numVotes: Int = 0

  public init(name: String) {
    self.name = name
  }


}

Ballot@(any) :: caller <- (any) {
  public init()
  mutates (Voter.hasVoted, Voter.delegate, Voter.votedProposalID, Voter.votingWeight)
  {
    chairperson = caller

    // Chairperson is a normal voter.
    voters[chairperson] = Voter(1)
    votersKeys[0] = chairperson

    become Proposing
  }
}

Ballot@(Proposing) :: (chairperson) {
  // Add a proposal to the list of proposals to vote on.
  public func addProposal(proposalName: String)
    mutates (proposals, Proposal.name, Proposal.numVotes)
    post (proposals[proposals.size - 1].name == proposalName && proposals[proposals.size - 1].numVotes == 0)
    post (forall (i, Int, proposals[i] == prev(proposal[i]) || i == prev(proposals.size)))
  {
    proposals[proposals.size] = Proposal(proposalName)
  }

  // Allow an address to vote.
  public func giveRightToVote(voter: Address)
    mutates (voters, votersKeys)
    pre (arrayContains(votersKeys, voter) == false)
    pre (voters[voter].votingWeight == 0)
    
    post (voters[voter].votingWeight == 1 && voters[voter].hasVoted == false && voters[voter].votedProposalID == 0)
    post (forall (a, Address, voters[a] == prev(voters[a]) || a == voter))
    post (votersKeys.size == prev(votersKeys.size) + 1)
    post (votersKeys[votersKeys.size - 1] == voter)
    post (forall (i, Int, votersKeys[i] == prev(votersKeys[i]) || i == votersKeys.size - 1))

  {
    // Ensure the voter has not been initialised yet, by checking the weight.
    assert(voters[voter].votingWeight == 0)
    // Create voter and add to dictionary.
    voters[voter] = Voter(1)
    votersKeys[votersKeys.size] = voter
  }

  // Begin the voting phase.
  public func beginVote() {
    become Voting
  }
}

Ballot@(Voting) :: voter <- (votersKeys) {
  // Delegate vote to another voter.
  public func delegate(target: Address)
    mutates (Voter.hasVoted, Voter.delegate, Voter.votingWeight, Proposal.numVotes)
    post (voters[voter].hasVoted)
    post (forall (a, Address, voters[a].hasVoted == prev(voters[a].hasVoted) || a == voter))

    post (voters[voter].delegate == target && voters[target].delegate == prev(voters[target].delegate))
    post (forall (a, Address, voters[a].delegate == prev(voters[a].delegate) || a == voter))

    post (voters[target].votingWeight  == prev(voters[target].votingWeight) + prev(voters[voter].votingWeight))
    post (forall (a, Address, voters[a].votingWeight == prev(voters[a].votingWeight) || a == target))

    post (voters[target].hasVoted ==> proposals[voters[target].votedProposalID] == prev(proposals[voters[target].votedProposalID]) + prev (voters[voter].votingWeight))
    post (forall (i, Int, proposals[i].numVotes == prev(proposals[i].numVotes) || (voters[target].hasVoted && i == voters[target.votedProposalID])))

  {
    // Ensure the delegator has not already voted, the delegator is not the delegate,
    // and that the delegate has the right to vote.
    assert((voters[voter].hasVoted == false) && (voter != target) && (voters[target].votingWeight != 0))

    // Delegating to a delegate that itself delegates is not allowed, as loops could be formed and
    // unbounded gas consumption is possible. This must be checked explicitly as otherwise votes
    // would be sent to an incorrect proposal.
    assert(voters[target].delegate == 0x0000000000000000000000000000000000000000)

    voters[voter].hasVoted = true
    voters[voter].delegate = target

    // The voting weight of the caller.
    let voterWeight: Int = voters[voter].votingWeight

    // Increase the weight of the delegate.
    voters[target].votingWeight += voterWeight

    if voters[target].hasVoted {
      // If the delegate has already voted for a proposal, increase its number of votes.

      // The proposal the delegate has voted for.
      var votedProposalID: Int = voters[target].votedProposalID // TODO: this should be let, but is var due to a bug.
      proposals[votedProposalID].numVotes += voterWeight
    }
  }

  public func vote(proposalID: Int)
    mutates (Voter.hasVoted, Voter.votedProposalID, Proposal.numVotes)
    post (voters[voter].hasVoted == false)
    post (forall (a, Address, voters[a].hasVoted == prev(voters[a].hasVoted) || a == voter))

    post (voters[voter].proposalID == proposalID)
    post (forall (a, Address, voters[a].proposalID == prev(voters[a].proposalID) || a == voter))

    post (proposals[proposalID].numVotes == prev(proposals[proposalID].numVotes) + voters[voter].votingWeight)
    post (forall (i, Int, proposals[i].numVotes == prev(proposals[i].numVotes) || i == proposalID))

  {
    assert(voters[voter].hasVoted == false)
    voters[voter].hasVoted = true
    voters[voter].votedProposalID = proposalID

    let weight: Int = voters[voter].votingWeight
    proposals[proposalID].numVotes += weight
  }
}

Ballot@(Voting) :: (any) {
  public func getWinningProposalID() -> Int
  post (returning (r, forall (i, Int, proposals[i].numVotes <= proposals[r].numVotes)))
  {
    var winningProposalID: Int = 0

    var i: Int = 0
    for let proposal: Proposal in proposals {
      if proposal.numVotes > proposals[winningProposalID].numVotes {
        winningProposalID = i
      }

      i += 1
    }

    return winningProposalID
  }

  public func getWinningProposalName() -> String
  // post ()
  {
    return proposals[getWinningProposalID()].name
  }
}
