// SimpleAuction.flint
//
// Allows a user to launch an auction and collect the highest bid.
// When the previous highest bidder is outbid, their bid is refunded
// immediately.

contract SimpleAuction {
  let beneficiary: Address
  var hasAuctionEnded: Bool = false

  var highestBidder: Address
  var highestBid: Wei = Wei(0)

  event highestBidDidIncrease (bidder: Address, amount: Int)
  event auctionDidEnd (winner: Address, bid: Int)

  invariant (highestBid.rawValue >= 0)

  // invariant (forall (s: SimpleAuction) :: (highestBid.getRawValue() > 0 ==> Was(s.highestBidder.Calls(bid(highestBid)))))
  // invariant (forall (s: SimpleAuction) :: (s.hasAuctionEnded ==> Was(s.beneficiary.Calls(endAuction()))))

  // invariant (forall (a: SimpleAuction, e: External) :: ())
}



SimpleAuction :: caller <- (any) {
  public init()
    mutates(Wei.rawValue)
  {
    beneficiary = caller
    highestBidder = caller
  }


  @payable
  public func bid(implicit value: Wei)
    mutates (highestBidder, Wei.rawValue, highestBid, beneficiary, hasAuctionEnded)

    post ((prev(value.rawValue) > prev(highestBid.rawValue)) ==> highestBidder == caller)
    post ((prev(value.rawValue) > prev(highestBid.rawValue)) ==> highestBid.rawValue == prev(value.rawValue))

  {
    if hasAuctionEnded { fatalError() }
    if value.rawValue <= highestBid.rawValue { fatalError() }
    assert (highestBid.rawValue >= 0)

    if highestBid.rawValue > 0 {
      // Reimburse the previous highest bidder.
      send(highestBidder, &highestBid)
    }
    assert (highestBid.rawValue == 0)

    // Set the new highest bidder.
    highestBidder = caller

    // Record the new highest bid.
    highestBid.transfer(source: &value)

    let amount: Int = value.rawValue
    emit highestBidDidIncrease(bidder: caller, amount: amount)
  }


  public func getHighestBid() -> Int
  post (returns (highestBid.rawValue))
  {
    return highestBid.getRawValue()
  }

  public func getHighestBidder() -> Address
  post (returns (self.highestBidder))
  {
    return highestBidder
  }
}

SimpleAuction :: (beneficiary) {
  public func endAuction()
    mutates (hasAuctionEnded, Wei.rawValue,  beneficiary, highestBid, highestBidder)
    pre (hasAuctionEnded == false)
    post (hasAuctionEnded)
    post (highestBid.rawValue == 0)
  {
    if hasAuctionEnded { fatalError() }

    hasAuctionEnded = true
    let bid: Int = highestBid.getRawValue()

    send(beneficiary, &highestBid)
    assert (highestBid.rawValue == 0)

    emit auctionDidEnd(winner: highestBidder, bid: bid)
  }
}
