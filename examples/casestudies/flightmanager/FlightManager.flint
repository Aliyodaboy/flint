contract FlightManager {
  var flightInformation: FlightInformation
  let admin: Address
  var ticketPrice: Int
  
  var numRemainingSeats: Int

  var passengers: [Address]
  var numPassengers: Int = 0

  var amountPaid: [Address: Wei]
}

FlightManager :: caller <- (any) {
  public init(flightID: String, 
              admin: Address, 
              ticketPrice: Int, 
              numSeats: Int) {
    self.flightInformation = FlightInformation(flightID)
    self.admin = admin
    self.ticketPrice = ticketPrice
    self.numRemainingSeats = numSeats
    self.passengers = []
    self.amountPaid = [:]
  }

  @payable
  public func buy(implicit value: Wei)
    mutates (amountPaid, numPassengers, numRemainingSeats, passengers, Wei.rawValue)
  {
    let amountGiven: Int = value.getRawValue()
    assert(amountGiven == ticketPrice)
    assert(numRemainingSeats > 0)
    assert(flightInformation.isCancelled == false)

    // Record the received Ether in the contract's state.
    amountPaid[caller].transfer(source: &value)

    passengers[numPassengers] = caller
    numPassengers += 1

    numRemainingSeats -= 1
  }

  public func getFlightID() -> String {
    return flightInformation.flightID
  }

  public func isFlightCancelled() -> Bool {
    return flightInformation.isCancelled
  }

  public func getTicketPrice() -> Int {
    return ticketPrice
  }

  public func getNumRemainingSeats() -> Int {
    return numRemainingSeats
  }
}

FlightManager :: (admin) {
  public func cancelFlight()
    mutates (FlightInformation.isCancelled)
  {
    flightInformation.cancelFlight()
  }
}

FlightManager :: passenger <- (passengers) {
  public func retrieveRefund() {
    assert(flightInformation.isCancelled)
    send(passenger, &amountPaid[passenger])
  }
}

struct FlightInformation {
  var flightID: String
  var isCancelled: Bool = false

  init(flightID: String) {
    self.flightID = flightID
  }

  func cancelFlight()
    mutates (isCancelled)
  {
    isCancelled = true
  }
}
