contract LotteryMultipleWinners (Accepting, Finished){
  var owner: Address
  var randNonce: Int = 0
  var winners: [Address] = []
  var prize: Int = 0

  var gotReward: [Address: Bool] = [:]
  var choices: [[Address]] = [[]]

  var balance : Wei = Wei(0)


  invariant (balance.rawValue >= 0)
  invariant (prize >= 0)
  invariant (randNonce >= 0)
  invariant (choices.size <= 100)
}

LotteryMultipleWinners @(any):: caller <- (any) {
  public init()
  mutates (Wei.rawValue)
  {
    self.owner = caller
    become Accepting
  }

  // func randomNumber(limit: Int) -> Int
  // pre (limit > 0)
  // post (returning (r, 0 <= r && r < limit))
  // post (randNonce == prev(randNonce) + 1)
  //
  // {
  //   let rand: Int = ..
  //   randNonce += 1
  //   return rand
  // }
}

LotteryMultipleWinners @(Accepting) :: caller <- (any) {
  @payable
  public func join(chosenNumber: Int, implicit value: inout Wei)
  mutates (balance, Wei.rawValue, choices)
  pre (chosenNumber > 0 && chosenNumber <= 100)
  pre (value.rawValue == 1)

  post (balance.rawValue == prev(balance.rawValue) + prev(value.rawValue))
  post (choices[chosenNumber][prev(choices[chosenNumber].size)] == caller)
  post (forall (i, Int, 0 <= i && i < choices.size ==> forall(j, Int, 0 <= j && j < choices[i].size ==> choices[i][j] == prev(choices[i][j]) || (i == chosenNumber && j == prev(choices[chosenNumber].size)))))

  {
    choices[chosenNumber][choices[chosenNumber].size] = caller
    balance.transfer(source: &value)
  }
}

LotteryMultipleWinners @(Finished) :: caller <- (any) {
  func isWinner() -> Bool
  post (returns (exists (i, Int, winners[i] == caller)))
  {
    let max: Int = winners.size
    for var a: Address in winners {
      if a == caller {
        return true
      }
    }
    return false
  }

  public func withdrawReward()
  mutates (gotReward, Wei.rawValue)
  // pre (isWinner())
  pre (exists (i, Int, winners[i] == caller))
  pre (gotReward[caller] == false) //problem here ; Arrays and dictionaries cannot be defined as local variables yet "skip verifier" but solved if I do not skip verifier

  post (gotReward[caller] == true)
  post (balance.rawValue == prev(balance.rawValue) - prize)

  {
    // assert (gotReward[caller] == false)
    let toSend: Wei = Wei(source: &balance, amount: prize)
    gotReward[caller] = true
    send(caller, &toSend)
  }
}

LotteryMultipleWinners @(any) :: (owner) {
  public func selectWinners() -> Int
  mutates (winners, prize)
  pre (winners.size != 0) // wrong

  post (returning (r, forall (i, Int, 0 <= i && i < winners.size ==> winners[i] == choices[r][i]) && choices[r].size == winners.size))
  post (prize == balance.rawValue / winners.size)
  {
    // let chosen: Int = randomNumber(100) + 1 // cannot get a random number here
    // self.winners = choices[0]
    // self.winners = choices[chosen] //problem here
    assert (winners.size != 0)
    self.prize = balance.rawValue / winners.size
    return chosen
    become Finished
  }


}
