/////// issue with String #441
/////// issue with precondition #459

contract TokenErc20 {
  // var name: String
  // var symbol: String
  var decimals: Int
  var totalSupply: Int = 0

  var balances: [Address : Int] = [:]
  var allowances: [Address : [Address : Int]] = [:]

  event Transfer(indexed_from : Address, indexed_to : Address, value: Int)
  event Approval(indexed_owner : Address, indexed_spender : Address, value: Int)
}

TokenErc20 :: caller <- (any) {
  public init(_decimals: Int, _initialSupply: Int) {
  // public init(_name: String, _symbol: String, _decimals: Int, _initialSupply: Int) {
    // self.name = _name
    // self.symbol = _symbol
    self.decimals = _decimals
    self.balances[caller] = _initialSupply
  }

  public func transfer(_to: Address, _value: Int)
  mutates(balances)
  pre (balances[caller] >= _value)
  pre (allowances[caller][_to] >= _value)
  pre (_to != caller)

  post (prev(balances[caller]) >= _value && prev(allowances[caller][_to]) >= _value ==> balances[caller] == prev(balances[caller]) - _value)
  post (prev(balances[caller]) >= _value && prev(allowances[caller][_to]) >= _value ==> balances[_to] == prev(balances[_to]) + _value)
  post (prev(balances[caller]) >= _value && prev(allowances[caller][_to]) >= _value ==> forall(a, Address, dictContains(balances, a) ==> balances[a] == prev(balances[a]) || a == caller || a == _to))

  post (prev(balances[caller]) < _value || prev(allowances[caller][_to]) < _value ==> forall(a, Address, dictContains(balances, a) ==> balances[a] == prev(balances[a])))

  {
    transferFrom(_from: caller, _to: _to, _value: _value)
  }


  public func transferFrom (_from: Address, _to: Address, _value: Int)
  mutates (balances)
  pre (balances[_from] >= _value)
  pre (allowances[_from][_to] >= _value)
  pre (_from != _to)

  post (prev(balances[_from]) >= _value && prev(allowances[_from][_to]) >= _value ==> balances[_from] == prev(balances[_from]) - _value)
  post (prev(balances[_from]) >= _value && prev(allowances[_from][_to]) >= _value ==> balances[_to] == prev(balances[_to]) + _value)
  post (prev(balances[_from]) >= _value && prev(allowances[_from][_to]) >= _value ==> forall(a, Address, dictContains(balances, a) ==> balances[a] == prev(balances[a]) || a == _from || a == _to))

  post (prev(balances[_from]) < _value || prev(allowances[_from][_to]) < _value ==> forall(a, Address, dictContains(balances, a) ==> balances[a] == prev(balances[a])))
  {
      assert (balances[_from] >= _value)
      assert (allowances[_from][_to] >= _value)

      balances[_from] -= _value
      balances[_to] += _value

      emit Transfer(indexed_from: _from, indexed_to: _to, value: _value)

      // return true
  }

  public func approve(spender: Address, value: Int)
  mutates (allowances)
  // pre (value >= 0)
  post (value >= 0 ==> allowances[caller][spender] == value)
  post (value >= 0 ==> forall (a1, Address, dictContains(allowances, a1) ==> forall(a2, Address, dictContains(allowances[a1], a2) ==> allowances[a1][a2] == prev(allowances[a1][a2]) || (a1 == caller && a2 == spender))))
  // post (forall (a1, Address, forall (a2, Address, allowances[a1][a2] == prev(allowances[a1][a2]) || (a1 == caller && a2 == spender))))

  // post (value < 0 ==> forall (a1, Address, dictContains(allowances, a1) ==> forall(a2, Address, dictContains(allowances[a1], a2) ==> allowances[a1][a2] == prev(allowances[a1][a2])))
  {
    allowances[caller][spender] = value
  }

}

TokenErc20 :: (any) {
  public func balanceOf(_owner: Address) -> Int
  pre (dictContains(balances, _owner) == true)
  post (returns (balances[_owner]))
  {
    return balances[_owner]
  }

  public func allowance(owner: Address, spender: Address) -> Int
  pre (dictContains(allowances, owner) &&  dictContains(allowances[owner], spender))
  post (returns(allowances[owner][spender]))
  {
    return allowances[owner][spender]
  }
}
