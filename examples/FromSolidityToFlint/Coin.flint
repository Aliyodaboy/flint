contract Coin {
    var minter : Address
    var balance: [Address : Int] = [:]
    event Sent(from: Address, to: Address, amount: Int)
}

Coin :: caller <- (any) {
    public init() {
        self.minter = caller
    }

    public func mint(receiver : Address, amount: Int) mutates (balance){
        assert (caller == minter)
        assert (amount < 1e60)

        balance[receiver] += amount
    }

    public func send(receiver : Address, amount : Int) mutates(balance){
        assert (amount <= balance[caller])

        balance[caller] -= amount
        balance[receiver] += amount
        emit Sent(from: caller, to: receiver, amount: amount)
    }
}
