//// cannot get hashed value
//// can we get a contract using the address #473. Can change function verifyInput




//trait here useless
// contract trait MachineLearningSolutionAttemp {
//   var applicant: Address
//
//   self :: caller <- (any) {
//     public init() {
//       applicant = caller
//     }
//   }
// }

contract MachineLearningVerification (NotExpired, Expired){
  var author: Address
  var modelData: String

  var authorContribution: Wei
  var claimed: Bool = false

  var winner: Address = 0x00000_00000_00000_00000_00000_00000_00000_00000
  var winningContract: Address = 0x00000_00000_00000_00000_00000_00000_00000_00000
}

MachineLearningVerification@(any) :: caller <- (any) {
  @payable
  public init(implicit value: inout Wei, data: String, )
  mutates(Wei.rawValue)
  {
    self.author = caller
    self.modelData = data
    self.authorContribution = Wei(source: &value)
    become NotExpired
  }
}


MachineLearningVerification@(NotExpired) :: caller <- (any) {
  // wrong function
  public func verifyInput(applicantContract: Address, hashedValue: String)
  mutates (claimed, winningContract, author, modelData, authorContribution, Wei.rawValue, winner)
  pre (claimed == false)

  post (hashedValue == hashOfCorrectOutput ==> claimed == true)
  post (hashedValue == hashOfCorrectOutput ==> winningContract == applicantContract)
  post (hashedValue == hashOfCorrectOutput ==> authorContribution.rawValue == 0)
  
  post (hashedValue != hashOfCorrectOutput ==> claimed == prev(claimed))
  post (hashedValue != hashOfCorrectOutput ==> winningContract == prev(winningContract))
  post (hashedValue != hashOfCorrectOutput ==> authorContribution.rawValue == prev(authorContribution.rawValue))

  {
    assert(claimed == false)
    let hashOfCorrectOutput: String = soliditySelectorHex(modelData) // this function does not work

    if hashedValue == hashOfCorrectOutput {
      self.claimed == true
      self.winningContract = applicantContract

      send(caller, authorContribution)
    }
  }
}


MachineLearningVerification@(NotExpired) :: (author) {
  public func becomeExpired() {
    become Expired
  }

  @payable
  public func increaseAuthorContribution(implicit value: inout Wei)
  mutates (Wei.rawValue, authorContribution)
  post (authorContribution.rawValue == prev(authorContribution.rawValue) + prev(value.rawValue))
  {
    authorContribution.transfer(source: &value)
  }


}
