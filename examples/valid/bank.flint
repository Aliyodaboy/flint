contract Bank {
  var manager: Address
  var accounts: [Address: Int]
  var keys: Address[30] // 30 accounts supported
  var lastIndex: Int
}

Bank :: account <- (any) {
  public mutating func register() {
    keys[lastIndex] = account
    lastIndex = lastIndex + 1
  }
}

Bank :: (manager) {
  public mutating func freeDeposit(account: Address, amount: Int) {
    accounts[account] = accounts[account] + amount
  }

  public mutating func clear(account: Int) {
    accounts[account] = 0
  }
}

Bank :: account <- (keys) {
  public func getBalance() -> Int {
    return accounts[account]
  }

  public mutating func transfer(amount: Int, destination: Address) {
    accounts[account] = accounts[account] - amount
    accounts[destination] = accounts[destination] + amount
  }
}
