contract WesternUnion {
  // only manager can add customers
  let manager: Address

  var customers: [Address] = []
  var numCustomers: Int = 0

  //only customers can withdraw money from bank

  // customer can only withdraw the amount of money in their account
  // customer cannot withdraw more money than is in their account
  var accounts: [Address: Wei] = [:]
}


WesternUnion :: (any) {
  public init(manager: Address) {
    self.manager = manager
  }
}

WesternUnion :: (manager) {
  public func addCustomer(customer: Address)
    mutates (customers, numCustomers)
  {
    customers[numCustomers] = customer
    numCustomers += 1 //Issue if we don't increment numCustomers
  }
}


WesternUnion :: customer <- (customers) {
  @payable
  public func deposit(implicit amount: Wei, recipient: Address)
    mutates (accounts)
  {
    accounts[recipient].transfer(&amount)
    var a: Wei = Wei(0-1);
  }

  public func withdraw()
    mutates (accounts)
  {
    var amt: Wei = Wei(&accounts[customer])
    send(customer, &amt)
  }
}
