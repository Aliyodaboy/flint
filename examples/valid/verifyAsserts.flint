contract VerifyAsserts  {
  let ten: Int = 10

  invariant (10 == 10)
  invariant (ten == 10)
}

VerifyAsserts :: (any) {
  public init() {}

  func testAssert1()
  {
    assert (1 == 1)
    var i: Int = 10
    let j: Int = 20
    i += 5
    i += 5
    assert (i == j)
  }

  func testAssert2(ten: Int)
  pre(ten == 5)
  pre(self.ten == 10)
  {
    assert (self.ten != ten)
    assert (1 == 1)
  }

  func testIfStatementAssert(i: Int)
  {
    if i > 0 {
      assert (i >= 1)
    } else {
      assert (i <= 0)
    }
  }

  func failingAssertion(j: Int)
  {
    assert (j == 0)
  }

  func testPreConditions()
    pre (1 == 1)
  {
    assert (5 > 2)
  }

  func testPostConditions()
    post(1 == 1)
  {

  }

  func testPrePostConditions()
    pre (2 == 2)
    post (1 == 1)
  {

  }
//  func testGlobals() {
//    assert(ten == 10)
//  }
}
