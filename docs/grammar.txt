// Statement
statement -> expression
statement -> [return] (expression)
statement -> branch-statement
statements -> (statement) (statements)

// Declaration
declaration -> contract-declaration
declaration -> function-declaration
declaration -> variable-declaration
declaration -> contract-behavior-declaration

contract-declaration -> [contract] identifier [{] (variable-declarations) [}]

variable-declaration -> [var] identifier type-annotation
variable-declarations -> variable-declaration (variable-declarations)

function-declaration -> function-head identifier parameter-clause (function-result) code-block
function-head -> (declaration-attributes) (declaration-modifiers) [func]
function-result -> [->] type
function-declarations -> function-declaration (function-declarations)

code-block -> [{] statements [}]

parameter-clause -> [(] [)] | [(] parameter-list [)]
parameter-list -> parameter | parameter [,] parameter-list
parameter -> identifier type-annotation

declaration-attribute -> [@] . [a-zA-Z]*
declaration-attributes -> declaration-attribute (declaration-attributes)

declaration-modifier -> [public] | [mutating]
declaration-modifiers -> declaration-modifier (declaration-modifiers)

contract-behavior-declaration -> identifier [::] (caller-capability-binding) caller-capability-group (function-declarations)

caller-capability-group -> [(] caller-capability-list [)]
caller-capability-list -> caller-capability-identifier | caller-capability-identifier [,] caller-capability-list
caller-capability-binding -> identifier [<-]

type-annotation -> [:] type

// Expression
expression -> identifier | binary-expression | function-call | literal | bracketed-expression | subscript-expression
binary-expression -> expression binary-operator expression
bracketed-expression -> [(] expression [)]
subscript-expression -> identifier [[] expression []]

// Function Calls

function-call -> identifier function-call-argument-clause
function-call-argument-clause -> [(] [)] | [(] function-call-argument-list [)]
function-call-argument-list -> expression | expression [,] function-call-argument-list

binary-operator -> [+] | [-] | [=] | [.]

// Identifiers
identifier -> [a-zA-Z] . [a-zA-Z0-9]*
type -> identifier | [[] type []] | type [[] numeric-literal []] | [[] type [:] type []]
caller-capability-identifier -> identifier

// Literals
literal -> numeric-literal | string-literal | boolean-literal

numeric-literal -> decimal-literal
decimal-literal -> [0-9]+ | [0-9]+ [.] [0-9]+

string-literal -> ["] [a-zA-Z0-9]* ["]
boolean-literal -> [true] | [false]

// Branching
if-statement -> [if] expression code-block (else-clause)
else-clause -> [else] code-block
