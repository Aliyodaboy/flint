struct Test {
  var a: Int
  var b: Bool

  mutating func bar() {
    a += 2
  }

  func baz() -> Int {
    return a
  }
}

contract A {
  var a: Int
  var test: Test
  var test2: Test
  var a: Array
}

A :: (any) {
  mutating public func modifyTest() {
    test.bar()
  }

  mutating public func modifyTest2() {
    test2.bar()
  }

  public func getTest() -> Int {
    return test.baz()
  }

  public func getTest2() -> Int {
    return test2.baz()
  }

  public mutating func add(x: Int) {
    a.add(x)
  }

  public func get(x: Int) -> Int {
    return a.get(x)
  }

  public func getSize() -> Int {
    return a.size
  }
}

struct Array {
  var elements: [Int]
  var size: Int

  mutating func add(value: Int) {
    elements[size] = value
    size += 1
  }

  func get(n: Int) -> Int {
    return elements[n]
  }

  func getSize() -> Int {
    return size
  }
}
